/*
 * Copyright 2020 - present Maksym Ostroverkhov.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "application"
    id "com.google.protobuf"
    id "idea"
}

description = "jauntsdn-trisocket: RSocket-futures service"

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

dependencies {
    protobuf project(":jaunt-rsocket-service-idl")

    implementation project(":jaunt-rsocket-runtime")
    implementation "com.jauntsdn.rsocket:rsocket-rpc-futures"
    implementation "com.google.protobuf:protobuf-java"
    implementation "org.slf4j:slf4j-api"
}

sourceSets {
    main {
        java { srcDir "src/generated" }
    }
}

if (findProperty("generateProto") == "true" && osdetector.os == "linux") {
    println "Generating services from IDL"

    sourceSets {
        main {
            proto { srcDir "src/main/proto" }
        }
    }

    protobuf {
        generatedFilesBaseDir = "${projectDir}/src/generated"
        protoc {
            artifact = "com.google.protobuf:protoc"
        }
        plugins {
            rsocketRpc {
                artifact = "com.jauntsdn.rsocket:rsocket-rpc-futures-compiler"
            }
            generateProtoTasks {
                ofSourceSet("main")*.plugins {
                    rsocketRpc {
                        option "metadataless-method-definitions"
                    }
                }
            }
        }
    }

    clean {
        delete "src/generated"
    }

} else {
    tasks.whenTaskAdded { task ->
        if (task.name.contains("generateProto")) {
            task.enabled = false
        }
    }
}

idea {
    module {
        sourceDirs += file("src/main/proto")
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/rsocketRpc")

        generatedSourceDirs += file("src/generated/main/java")
        generatedSourceDirs += file("src/generated/main/rsocketRpc")
    }
}