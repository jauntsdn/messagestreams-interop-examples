// Generated by jauntsdn.com rsocket-rpc compiler (version 1.5.1)
// source: service.proto

package trisocket;

@com.jauntsdn.rsocket.Rpc.Generated(
    role = com.jauntsdn.rsocket.Rpc.Role.CLIENT,
    service = Roundsman.class)
@SuppressWarnings("all")
public final class RoundsmanClient implements Roundsman {
  private final com.jauntsdn.rsocket.MessageStreams streams;
  private final io.netty.buffer.ByteBufAllocator allocator;
  private final com.jauntsdn.rsocket.Rpc.Codec rpcCodec;
  private final com.jauntsdn.rsocket.RpcInstrumentation.Factory<trisocket.Veggie> chopInstrumentation;
  private final com.jauntsdn.rsocket.RpcInstrumentation.Factory<trisocket.Meat> marinadeInstrumentation;

  private RoundsmanClient(com.jauntsdn.rsocket.MessageStreams streams, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
    this.streams = streams;
    this.allocator = streams.allocator().orElse(io.netty.buffer.ByteBufAllocator.DEFAULT);
    com.jauntsdn.rsocket.RpcInstrumentation i = instrumentation == null
      ? streams.attributes().attr(com.jauntsdn.rsocket.Attributes.RPC_INSTRUMENTATION)
      : instrumentation.orElse(null);
    if (i == null) {
      this.chopInstrumentation = null;
      this.marinadeInstrumentation = null;
    } else {
      this.chopInstrumentation = i.instrument("client", Roundsman.SERVICE, Roundsman.METHOD_CHOP, true);
      this.marinadeInstrumentation = i.instrument("client", Roundsman.SERVICE, Roundsman.METHOD_MARINADE, true);
    }
    com.jauntsdn.rsocket.Rpc.Codec codec = streams.attributes().attr(com.jauntsdn.rsocket.Attributes.RPC_CODEC);
    if (codec != null) {
      rpcCodec = codec;
      if (codec.isDisposable()) {
        streams.onClose().thenAccept(ignored -> codec.dispose());
      }
      return;
    }
    throw new IllegalArgumentException("MessageStreams " + streams.getClass() + " does not provide RPC codec");
  }

  public static RoundsmanClient create(com.jauntsdn.rsocket.MessageStreams streams, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
    java.util.Objects.requireNonNull(streams, "streams");
    java.util.Objects.requireNonNull(instrumentation, "instrumentation");
    return new RoundsmanClient(streams, instrumentation);
  }

  public static RoundsmanClient create(com.jauntsdn.rsocket.MessageStreams streams) {
    java.util.Objects.requireNonNull(streams, "streams");
    return new RoundsmanClient(streams, null);
  }

  @Override
  @com.jauntsdn.rsocket.Rpc.GeneratedMethod(returnType = trisocket.Veggie.class)
  public java.util.concurrent.CompletionStage<trisocket.Veggie> chop(trisocket.Veggie message, com.jauntsdn.rsocket.Headers headersMetadata) {
    int externalMetadataSize = streams.attributes().intAttr(com.jauntsdn.rsocket.Attributes.EXTERNAL_METADATA_SIZE);
    int dataSize = message.getSerializedSize();
    boolean isDefaultService = headersMetadata.isDefaultService();
    io.netty.buffer.ByteBuf metadata = com.jauntsdn.rsocket.generated.ProtobufCodec.encodeHeaders(headersMetadata);
    String service = isDefaultService ? com.jauntsdn.rsocket.Rpc.RpcMetadata.defaultService() : Roundsman.SERVICE;
    com.jauntsdn.rsocket.Rpc.Codec codec = rpcCodec;
    io.netty.buffer.ByteBuf content = codec.encodeContent(allocator, metadata, service, Roundsman.METHOD_CHOP, false, Roundsman.METHOD_CHOP_IDEMPOTENT, dataSize, externalMetadataSize);
    com.jauntsdn.rsocket.generated.ProtobufCodec.encode("RoundsmanClient", content, message);
    com.jauntsdn.rsocket.Message msg = codec.encodeMessage(content, Roundsman.METHOD_CHOP_RANK);
    com.jauntsdn.rsocket.RpcInstrumentation.Listener<trisocket.Veggie> instrumentationListener = null;
    if (chopInstrumentation != null) {
      instrumentationListener = chopInstrumentation.create();
      instrumentationListener.onStart();
    }
    java.util.concurrent.CompletionStage<com.jauntsdn.rsocket.Message> messageResponse = streams.requestResponse(msg);
    java.util.concurrent.CompletionStage<trisocket.Veggie> chopResponse = messageResponse
      .thenApply(com.jauntsdn.rsocket.generated.ProtobufCodec.decode("RoundsmanClient", trisocket.Veggie.parser()));
    if (instrumentationListener != null) {
      chopResponse.whenComplete(com.jauntsdn.rsocket.RpcService.ResponseListener.create(messageResponse, instrumentationListener.onComplete()));
      return chopResponse;
    }
    chopResponse.whenComplete(com.jauntsdn.rsocket.RpcService.ResponseListener.create(messageResponse));
    return chopResponse;
  }
  @Override
  @com.jauntsdn.rsocket.Rpc.GeneratedMethod(returnType = trisocket.Meat.class)
  public java.util.concurrent.CompletionStage<trisocket.Meat> marinade(trisocket.Meat message, com.jauntsdn.rsocket.Headers headersMetadata) {
    int externalMetadataSize = streams.attributes().intAttr(com.jauntsdn.rsocket.Attributes.EXTERNAL_METADATA_SIZE);
    int dataSize = message.getSerializedSize();
    boolean isDefaultService = headersMetadata.isDefaultService();
    io.netty.buffer.ByteBuf metadata = com.jauntsdn.rsocket.generated.ProtobufCodec.encodeHeaders(headersMetadata);
    String service = isDefaultService ? com.jauntsdn.rsocket.Rpc.RpcMetadata.defaultService() : Roundsman.SERVICE;
    com.jauntsdn.rsocket.Rpc.Codec codec = rpcCodec;
    io.netty.buffer.ByteBuf content = codec.encodeContent(allocator, metadata, service, Roundsman.METHOD_MARINADE, false, Roundsman.METHOD_MARINADE_IDEMPOTENT, dataSize, externalMetadataSize);
    com.jauntsdn.rsocket.generated.ProtobufCodec.encode("RoundsmanClient", content, message);
    com.jauntsdn.rsocket.Message msg = codec.encodeMessage(content, Roundsman.METHOD_MARINADE_RANK);
    com.jauntsdn.rsocket.RpcInstrumentation.Listener<trisocket.Meat> instrumentationListener = null;
    if (marinadeInstrumentation != null) {
      instrumentationListener = marinadeInstrumentation.create();
      instrumentationListener.onStart();
    }
    java.util.concurrent.CompletionStage<com.jauntsdn.rsocket.Message> messageResponse = streams.requestResponse(msg);
    java.util.concurrent.CompletionStage<trisocket.Meat> marinadeResponse = messageResponse
      .thenApply(com.jauntsdn.rsocket.generated.ProtobufCodec.decode("RoundsmanClient", trisocket.Meat.parser()));
    if (instrumentationListener != null) {
      marinadeResponse.whenComplete(com.jauntsdn.rsocket.RpcService.ResponseListener.create(messageResponse, instrumentationListener.onComplete()));
      return marinadeResponse;
    }
    marinadeResponse.whenComplete(com.jauntsdn.rsocket.RpcService.ResponseListener.create(messageResponse));
    return marinadeResponse;
  }
}
