// Generated by jauntsdn.com rpc compiler (version 1.5.2)
// source: service.proto

package trisocket;

@com.jauntsdn.rsocket.Rpc.Generated(
    role = com.jauntsdn.rsocket.Rpc.Role.CLIENT,
    service = Farmer.class)
@SuppressWarnings("all")
public final class FarmerClient implements Farmer {
  private final com.jauntsdn.rsocket.MessageStreams streams;
  private final io.netty.buffer.ByteBufAllocator allocator;
  private final com.jauntsdn.rsocket.RpcInstrumentation.Factory<trisocket.Meat> meatInstrumentation;
  private final com.jauntsdn.rsocket.RpcInstrumentation.Factory<trisocket.Veggie> veggiesInstrumentation;
  private final com.jauntsdn.rsocket.Rpc.Codec rpcCodec;

  private FarmerClient(com.jauntsdn.rsocket.MessageStreams streams, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
    this.streams = streams;
    this.allocator = streams.allocator().orElse(io.netty.buffer.ByteBufAllocator.DEFAULT);
    com.jauntsdn.rsocket.RpcInstrumentation i = instrumentation == null
      ? streams.attributes().attr(com.jauntsdn.rsocket.Attributes.RPC_INSTRUMENTATION)
      : instrumentation.orElse(null);
    if (i == null) {
      this.meatInstrumentation = null;
      this.veggiesInstrumentation = null;
    } else {
      this.meatInstrumentation = i.instrument("client", Farmer.SERVICE, Farmer.METHOD_MEAT, true);
      this.veggiesInstrumentation = i.instrument("client", Farmer.SERVICE, Farmer.METHOD_VEGGIES, true);
    }
    com.jauntsdn.rsocket.Rpc.Codec codec = streams.attributes().attr(com.jauntsdn.rsocket.Attributes.RPC_CODEC);
    if (codec != null) {
      rpcCodec = codec;
      if (codec.isDisposable()) {
        streams.onClose().thenAccept(ignored -> codec.dispose());
      }
      return;
    }
    throw new IllegalArgumentException("MessageStreams " + streams.getClass() + " does not provide RPC codec");
  }

  public static FarmerClient create(com.jauntsdn.rsocket.MessageStreams streams, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
    java.util.Objects.requireNonNull(streams, "streams");
    java.util.Objects.requireNonNull(instrumentation, "instrumentation");
    return new FarmerClient(streams, instrumentation);
  }

  public static FarmerClient create(com.jauntsdn.rsocket.MessageStreams streams) {
    java.util.Objects.requireNonNull(streams, "streams");
    return new FarmerClient(streams, null);
  }

  @Override
  @com.jauntsdn.rsocket.Rpc.GeneratedMethod(returnType = trisocket.Meat.class)
  public void meat(trisocket.Order message, com.jauntsdn.rsocket.Headers headersMetadata, io.grpc.stub.StreamObserver<trisocket.Meat> observer) {
    int externalMetadataSize = streams.attributes().intAttr(com.jauntsdn.rsocket.Attributes.EXTERNAL_METADATA_SIZE);
    int dataSize = message.getSerializedSize();
    boolean isDefaultService = headersMetadata.isDefaultService();
    String service = isDefaultService ? com.jauntsdn.rsocket.Rpc.RpcMetadata.defaultService() : Farmer.SERVICE;
    io.netty.buffer.ByteBuf metadata = com.jauntsdn.rsocket.generated.ProtobufCodec.encodeHeaders(headersMetadata);
    com.jauntsdn.rsocket.Rpc.Codec codec = rpcCodec;
    io.netty.buffer.ByteBuf content = codec.encodeContent(allocator, metadata, service, Farmer.METHOD_MEAT, true, Farmer.METHOD_MEAT_IDEMPOTENT, dataSize, externalMetadataSize);
    com.jauntsdn.rsocket.generated.ProtobufCodec.encode("FarmerClient", content, message);
    com.jauntsdn.rsocket.Message msg = codec.encodeMessage(content, Farmer.METHOD_MEAT_RANK);
    com.jauntsdn.rsocket.RpcInstrumentation.Listener<trisocket.Meat> instrumentationListener = null;
    if (meatInstrumentation != null) {
      instrumentationListener = meatInstrumentation.create();
    }
    streams.requestStream(msg, com.jauntsdn.rsocket.RpcMessageCodec.Stream.Client.decode(observer, com.jauntsdn.rsocket.generated.ProtobufCodec.decode("FarmerClient", trisocket.Meat.parser()), instrumentationListener));
  }

  @Override
  @com.jauntsdn.rsocket.Rpc.GeneratedMethod(returnType = trisocket.Veggie.class)
  public void veggies(trisocket.Order message, com.jauntsdn.rsocket.Headers headersMetadata, io.grpc.stub.StreamObserver<trisocket.Veggie> observer) {
    int externalMetadataSize = streams.attributes().intAttr(com.jauntsdn.rsocket.Attributes.EXTERNAL_METADATA_SIZE);
    int dataSize = message.getSerializedSize();
    boolean isDefaultService = headersMetadata.isDefaultService();
    String service = isDefaultService ? com.jauntsdn.rsocket.Rpc.RpcMetadata.defaultService() : Farmer.SERVICE;
    io.netty.buffer.ByteBuf metadata = com.jauntsdn.rsocket.generated.ProtobufCodec.encodeHeaders(headersMetadata);
    com.jauntsdn.rsocket.Rpc.Codec codec = rpcCodec;
    io.netty.buffer.ByteBuf content = codec.encodeContent(allocator, metadata, service, Farmer.METHOD_VEGGIES, true, Farmer.METHOD_VEGGIES_IDEMPOTENT, dataSize, externalMetadataSize);
    com.jauntsdn.rsocket.generated.ProtobufCodec.encode("FarmerClient", content, message);
    com.jauntsdn.rsocket.Message msg = codec.encodeMessage(content, Farmer.METHOD_VEGGIES_RANK);
    com.jauntsdn.rsocket.RpcInstrumentation.Listener<trisocket.Veggie> instrumentationListener = null;
    if (veggiesInstrumentation != null) {
      instrumentationListener = veggiesInstrumentation.create();
    }
    streams.requestStream(msg, com.jauntsdn.rsocket.RpcMessageCodec.Stream.Client.decode(observer, com.jauntsdn.rsocket.generated.ProtobufCodec.decode("FarmerClient", trisocket.Veggie.parser()), instrumentationListener));
  }
}
