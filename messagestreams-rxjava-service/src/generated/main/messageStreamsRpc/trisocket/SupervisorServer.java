// Generated by jauntsdn.com rpc compiler (version 1.5.2)
// source: control_service.proto

package trisocket;

@com.jauntsdn.rsocket.Rpc.Generated(
    role = com.jauntsdn.rsocket.Rpc.Role.SERVICE,
    service = Supervisor.class)
@SuppressWarnings("all")
public final class SupervisorServer implements com.jauntsdn.rsocket.RpcService {
  private final java.util.concurrent.CompletableFuture<Void> onClose = new java.util.concurrent.CompletableFuture<>();
  private final Supervisor service;
  private final io.reactivex.rxjava3.functions.Function<com.google.protobuf.MessageLite, com.jauntsdn.rsocket.Message> messageEncoder;
  private final com.jauntsdn.rsocket.Rpc.Codec rpcCodec;
  private final io.reactivex.rxjava3.core.SingleTransformer<com.jauntsdn.rsocket.Message, com.jauntsdn.rsocket.Message> inquiryInstrumentation;

  private SupervisorServer(Supervisor service, com.jauntsdn.rsocket.RpcInstrumentation instrumentation, io.netty.buffer.ByteBufAllocator allocator, com.jauntsdn.rsocket.Rpc.Codec rpcCodec) {
    this.messageEncoder = com.jauntsdn.rsocket.generated.ProtobufCodec.encode("SupervisorServer", allocator, rpcCodec);
    this.service = service;
    this.rpcCodec = rpcCodec;
    if (instrumentation == null) {
      this.inquiryInstrumentation = null;
    } else {
      this.inquiryInstrumentation = instrumentation.instrumentSingle("service", Supervisor.SERVICE, Supervisor.METHOD_INQUIRY);
    }
  }

  public static SupervisorServer.Factory create(Supervisor service, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
    return new SupervisorServer.Factory(service, instrumentation);
  }

  public static SupervisorServer.Factory create(Supervisor service) {
    return new SupervisorServer.Factory(service);
  }

  @Override
  public String service() {
    return Supervisor.SERVICE;
  }

  @Override
  public Class<?> serviceType() {
    return Supervisor.SERVICE_TYPE;
  }

  @Override
  public io.reactivex.rxjava3.core.Completable fireAndForget(com.jauntsdn.rsocket.Message message) {
    message.release();
    return io.reactivex.rxjava3.core.Completable.error(new com.jauntsdn.rsocket.exceptions.RpcException("SupervisorServer: fireAndForget not implemented"));
  }

  @Override
  public io.reactivex.rxjava3.core.Single<com.jauntsdn.rsocket.Message> requestResponse(com.jauntsdn.rsocket.Message message) {
    try {
      io.netty.buffer.ByteBuf metadata = message.metadata();
      long header = com.jauntsdn.rsocket.Rpc.RpcMetadata.header(metadata);
      int flags = com.jauntsdn.rsocket.Rpc.RpcMetadata.flags(header);
      String method = rpcCodec.decodeMessageMethod(metadata, header, flags);

      io.reactivex.rxjava3.core.Single<com.jauntsdn.rsocket.Message> handler = requestResponseHandler(flags, method, message.data(), metadata);
      if (handler != null) {
        return handler;
      }
      return io.reactivex.rxjava3.core.Single.error(new com.jauntsdn.rsocket.exceptions.RpcException("SupervisorServer: requestResponse not implemented"));
    } catch (Throwable t) {
      return io.reactivex.rxjava3.core.Single.error(t);
    } finally {
      message.release();
    }
  }

  @Override
  public io.reactivex.rxjava3.core.Flowable<com.jauntsdn.rsocket.Message> requestStream(com.jauntsdn.rsocket.Message message) {
    message.release();
    return io.reactivex.rxjava3.core.Flowable.error(new com.jauntsdn.rsocket.exceptions.RpcException("SupervisorServer: requestStream not implemented"));
  }

  @Override
  public io.reactivex.rxjava3.core.Flowable<com.jauntsdn.rsocket.Message> requestChannel(com.jauntsdn.rsocket.Message message, org.reactivestreams.Publisher<com.jauntsdn.rsocket.Message> publisher) {
    try {
      io.netty.buffer.ByteBuf metadata = message.metadata();
      long header = com.jauntsdn.rsocket.Rpc.RpcMetadata.header(metadata);
      int flags = com.jauntsdn.rsocket.Rpc.RpcMetadata.flags(header);
      String method = rpcCodec.decodeMessageMethod(metadata, header, flags);

      if (com.jauntsdn.rsocket.Rpc.RpcMetadata.flagForeignCall(flags)) {
        io.reactivex.rxjava3.core.Single<com.jauntsdn.rsocket.Message> responseHandler = requestResponseHandler(flags, method, message.data(), metadata);
        if (responseHandler != null) {
          message.release();
          return responseHandler.toFlowable();
        }
      }
      message.release();
      return io.reactivex.rxjava3.core.Flowable.error(new com.jauntsdn.rsocket.exceptions.RpcException("SupervisorServer: requestChannel unknown method: " + method));
    } catch (Throwable t) {
      io.netty.util.ReferenceCountUtil.safeRelease(message);
      return io.reactivex.rxjava3.core.Flowable.error(t);
    }
  }

  @Override
  public io.reactivex.rxjava3.core.Flowable<com.jauntsdn.rsocket.Message> requestChannel(org.reactivestreams.Publisher<com.jauntsdn.rsocket.Message> messages) {
    return io.reactivex.rxjava3.core.Flowable.error(new com.jauntsdn.rsocket.exceptions.RpcException("SupervisorServer: requestChannel not implemented"));
  }

  @Override
  public void dispose() {
    onClose.complete(null);
  }

  @Override
  public boolean isDisposed() {
    return onClose.isDone();
  }

  @Override
  public io.reactivex.rxjava3.core.Completable onClose() {
    return io.reactivex.rxjava3.core.Completable.fromCompletionStage(onClose);
  }

  private io.reactivex.rxjava3.core.Single<com.jauntsdn.rsocket.Message> requestResponseHandler(int flags, String method, io.netty.buffer.ByteBuf data, io.netty.buffer.ByteBuf metadata) throws java.io.IOException {
    switch (method) {
      case Supervisor.METHOD_INQUIRY: {
        if (!Supervisor.METHOD_INQUIRY_IDEMPOTENT && com.jauntsdn.rsocket.Rpc.RpcMetadata.flagIdempotentCall(flags)) {
          return io.reactivex.rxjava3.core.Single.error(new com.jauntsdn.rsocket.exceptions.RpcException("SupervisorServer: idempotent call to non-idempotent method: " + method));
        }
        com.google.protobuf.CodedInputStream is = com.google.protobuf.CodedInputStream.newInstance(data.internalNioBuffer(0, data.readableBytes()));
        com.jauntsdn.rsocket.Headers inquiryHeaders = com.jauntsdn.rsocket.generated.ProtobufCodec.decodeHeaders(metadata);
        io.reactivex.rxjava3.core.Single<com.jauntsdn.rsocket.Message> inquiry = service.inquiry(trisocket.Inquiry.parseFrom(is), inquiryHeaders).map(messageEncoder);
        if (inquiryInstrumentation != null) {
          return inquiry.compose(inquiryInstrumentation);
        }
        return inquiry;
      }
      default: {
        return null;
      }
    }
  }

  public static final class Factory extends com.jauntsdn.rsocket.RpcService.ServerFactory<SupervisorServer> {

    public Factory(Supervisor service, java.util.Optional<com.jauntsdn.rsocket.RpcInstrumentation> instrumentation) {
      super(service, instrumentation);
    }

    public Factory(Supervisor service) {
      super(service);
    }

    @Override
    public SupervisorServer create(com.jauntsdn.rsocket.RpcInstrumentation rpcInstrumentation, io.netty.buffer.ByteBufAllocator allocator, com.jauntsdn.rsocket.Rpc.Codec rpcCodec) {
      return new SupervisorServer(service(), rpcInstrumentation, allocator, rpcCodec);
    }
  }

  public static final class Descriptor extends com.jauntsdn.rsocket.Rpc.ServiceDescriptor {
    public static final Descriptor INSTANCE = new Descriptor();

    private Descriptor() {
      super(java.util.Arrays.asList(
        com.jauntsdn.rsocket.Rpc.ServiceDescriptor.Call.of(
          Supervisor.SERVICE,
          Supervisor.METHOD_INQUIRY,
          trisocket.Inquiry::newBuilder,
          trisocket.Report::parseFrom)
        ));
    }
  }
}
